description: disable tracing, it depends on too many sourceless javascript files
author: Michael Gilbert <mgilbert@debian.org>

--- a/chrome/browser/BUILD.gn
+++ b/chrome/browser/BUILD.gn
@@ -1681,18 +1681,6 @@ jumbo_split_static_library("browser") {
     "task_manager/web_contents_tags.h",
     "themes/theme_service_win.cc",
     "themes/theme_service_win.h",
-    "tracing/background_tracing_field_trial.cc",
-    "tracing/background_tracing_field_trial.h",
-    "tracing/background_tracing_metrics_provider.cc",
-    "tracing/background_tracing_metrics_provider.h",
-    "tracing/chrome_tracing_delegate.cc",
-    "tracing/chrome_tracing_delegate.h",
-    "tracing/crash_service_uploader.cc",
-    "tracing/crash_service_uploader.h",
-    "tracing/navigation_tracing.cc",
-    "tracing/navigation_tracing.h",
-    "tracing/trace_event_system_stats_monitor.cc",
-    "tracing/trace_event_system_stats_monitor.h",
     "transition_manager/full_browser_transition_manager.cc",
     "transition_manager/full_browser_transition_manager.h",
     "translate/android/translate_utils.cc",
@@ -1972,7 +1960,6 @@ jumbo_split_static_library("browser") {
     "//components/sync_preferences",
     "//components/sync_sessions",
     "//components/thread_pool_util",
-    "//components/tracing:startup_tracing",
     "//components/translate/content/browser",
     "//components/translate/core/browser",
     "//components/translate/core/common",
--- a/content/browser/BUILD.gn
+++ b/content/browser/BUILD.gn
@@ -62,8 +62,6 @@ jumbo_source_set("browser") {
     "//components/rappor",
     "//components/services/filesystem:lib",
     "//components/services/leveldb:lib",
-    "//components/tracing",
-    "//components/tracing:startup_tracing",
     "//components/ui_devtools",
     "//components/url_formatter",
     "//components/variations",
@@ -163,9 +161,6 @@ jumbo_source_set("browser") {
     "//services/service_manager/zygote:zygote_buildflags",
     "//services/shape_detection:lib",
     "//services/shape_detection/public/mojom",
-    "//services/tracing:lib",
-    "//services/tracing:manifest",
-    "//services/tracing/public/cpp",
     "//services/video_capture:lib",
     "//services/video_capture/public/cpp",
     "//services/video_capture/public/mojom:constants",
@@ -748,8 +743,6 @@ jumbo_source_set("browser") {
     "devtools/protocol/target_handler.h",
     "devtools/protocol/tethering_handler.cc",
     "devtools/protocol/tethering_handler.h",
-    "devtools/protocol/tracing_handler.cc",
-    "devtools/protocol/tracing_handler.h",
     "devtools/render_frame_devtools_agent_host.cc",
     "devtools/render_frame_devtools_agent_host.h",
     "devtools/service_worker_devtools_agent_host.cc",
@@ -1803,29 +1796,6 @@ jumbo_source_set("browser") {
     "streams/stream_write_observer.h",
     "theme_helper_mac.h",
     "theme_helper_mac.mm",
-    "tracing/background_memory_tracing_observer.cc",
-    "tracing/background_memory_tracing_observer.h",
-    "tracing/background_startup_tracing_observer.cc",
-    "tracing/background_startup_tracing_observer.h",
-    "tracing/background_tracing_active_scenario.cc",
-    "tracing/background_tracing_active_scenario.h",
-    "tracing/background_tracing_config_impl.cc",
-    "tracing/background_tracing_config_impl.h",
-    "tracing/background_tracing_manager_impl.cc",
-    "tracing/background_tracing_manager_impl.h",
-    "tracing/background_tracing_rule.cc",
-    "tracing/background_tracing_rule.h",
-    "tracing/file_tracing_provider_impl.cc",
-    "tracing/file_tracing_provider_impl.h",
-    "tracing/perfetto_file_tracer.cc",
-    "tracing/perfetto_file_tracer.h",
-    "tracing/trace_message_filter.cc",
-    "tracing/trace_message_filter.h",
-    "tracing/tracing_controller_impl.cc",
-    "tracing/tracing_controller_impl.h",
-    "tracing/tracing_controller_impl_data_endpoint.cc",
-    "tracing/tracing_ui.cc",
-    "tracing/tracing_ui.h",
     "url_loader_factory_getter.cc",
     "url_loader_factory_getter.h",
     "utility_process_host.cc",
@@ -2049,7 +2019,6 @@ jumbo_source_set("browser") {
   if (!is_android) {
     deps += [
       "//components/vector_icons",
-      "//content/browser/tracing:resources",
     ]
   }
 
--- a/content/shell/BUILD.gn
+++ b/content/shell/BUILD.gn
@@ -517,7 +517,6 @@ repack("pak") {
   sources = [
     "$root_gen_dir/content/app/resources/content_resources_100_percent.pak",
     "$root_gen_dir/content/app/strings/content_strings_en-US.pak",
-    "$root_gen_dir/content/browser/tracing/tracing_resources.pak",
     "$root_gen_dir/content/content_resources.pak",
     "$root_gen_dir/content/shell/shell_resources.pak",
     "$root_gen_dir/mojo/public/js/mojo_bindings_resources.pak",
@@ -535,7 +534,6 @@ repack("pak") {
     "//content:resources",
     "//content/app/resources",
     "//content/app/strings",
-    "//content/browser/tracing:resources",
     "//mojo/public/js:resources",
     "//net:net_resources",
     "//third_party/blink/public:resources",
--- a/headless/BUILD.gn
+++ b/headless/BUILD.gn
@@ -35,7 +35,6 @@ repack("pak") {
     "$root_gen_dir/content/app/resources/content_resources_100_percent.pak",
     "$root_gen_dir/content/app/strings/content_strings_en-US.pak",
     "$root_gen_dir/content/browser/devtools/devtools_resources.pak",
-    "$root_gen_dir/content/browser/tracing/tracing_resources.pak",
     "$root_gen_dir/content/content_resources.pak",
     "$root_gen_dir/headless/headless_lib_resources.pak",
     "$root_gen_dir/mojo/public/js/mojo_bindings_resources.pak",
@@ -62,7 +61,6 @@ repack("pak") {
     "//content/app/resources",
     "//content/app/strings",
     "//content/browser/devtools:resources",
-    "//content/browser/tracing:resources",
     "//mojo/public/js:resources",
     "//net:net_resources",
     "//third_party/blink/public:resources",
--- a/chrome/chrome_paks.gni
+++ b/chrome/chrome_paks.gni
@@ -98,7 +98,6 @@ template("chrome_extra_paks") {
       "$root_gen_dir/chrome/net_internals_resources.pak",
       "$root_gen_dir/chrome/quota_internals_resources.pak",
       "$root_gen_dir/components/components_resources.pak",
-      "$root_gen_dir/content/browser/tracing/tracing_resources.pak",
       "$root_gen_dir/content/content_resources.pak",
       "$root_gen_dir/mojo/public/js/mojo_bindings_resources.pak",
       "$root_gen_dir/net/net_resources.pak",
@@ -114,7 +113,6 @@ template("chrome_extra_paks") {
       "//chrome/common:resources",
       "//components/resources",
       "//content:resources",
-      "//content/browser/tracing:resources",
       "//mojo/public/js:resources",
       "//net:net_resources",
       "//third_party/blink/public:resources",
--- a/content/browser/browser_child_process_host_impl.cc
+++ b/content/browser/browser_child_process_host_impl.cc
@@ -34,7 +34,6 @@
 #include "content/browser/histogram_controller.h"
 #include "content/browser/loader/resource_message_filter.h"
 #include "content/browser/service_manager/service_manager_context.h"
-#include "content/browser/tracing/trace_message_filter.h"
 #include "content/common/child_process_host_impl.h"
 #include "content/common/service_manager/child_connection.h"
 #include "content/public/browser/browser_child_process_host_delegate.h"
@@ -163,7 +162,6 @@ BrowserChildProcessHostImpl::BrowserChil
   data_.id = ChildProcessHostImpl::GenerateChildProcessUniqueId();
 
   child_process_host_ = ChildProcessHost::Create(this);
-  AddFilter(new TraceMessageFilter(data_.id));
 
   g_child_process_list.Get().push_back(this);
   GetContentClient()->browser()->BrowserChildProcessHostCreated(this);
--- a/content/public/browser/background_tracing_config.cc
+++ b/content/public/browser/background_tracing_config.cc
@@ -4,8 +4,6 @@
 
 #include "content/public/browser/background_tracing_config.h"
 
-#include "content/browser/tracing/background_tracing_config_impl.h"
-
 namespace content {
 
 BackgroundTracingConfig::BackgroundTracingConfig(TracingMode tracing_mode)
@@ -15,7 +13,7 @@ BackgroundTracingConfig::~BackgroundTrac
 
 std::unique_ptr<BackgroundTracingConfig> BackgroundTracingConfig::FromDict(
     const base::DictionaryValue* dict) {
-  return BackgroundTracingConfigImpl::FromDict(dict);
+  return nullptr;
 }
 
 }  // namespace content
--- a/content/public/browser/background_tracing_config.h
+++ b/content/public/browser/background_tracing_config.h
@@ -34,7 +34,6 @@ class CONTENT_EXPORT BackgroundTracingCo
   virtual void IntoDict(base::DictionaryValue* dict) const = 0;
 
  private:
-  friend class BackgroundTracingConfigImpl;
   explicit BackgroundTracingConfig(TracingMode tracing_mode);
 
   const TracingMode tracing_mode_;
--- a/content/browser/browser_main_loop.cc
+++ b/content/browser/browser_main_loop.cc
@@ -92,8 +92,6 @@
 #include "content/browser/speech/speech_recognition_manager_impl.h"
 #include "content/browser/startup_data_impl.h"
 #include "content/browser/startup_task_runner.h"
-#include "content/browser/tracing/background_tracing_manager_impl.h"
-#include "content/browser/tracing/tracing_controller_impl.h"
 #include "content/browser/utility_process_host.h"
 #include "content/browser/webrtc/webrtc_internals.h"
 #include "content/browser/webui/content_web_ui_controller_factory.h"
@@ -1598,10 +1596,6 @@ void BrowserMainLoop::InitializeMojo() {
   // know they're running in the same process as the service.
   content::NavigableContentsView::SetClientRunningInServiceProcess();
 
-  tracing_controller_ = std::make_unique<content::TracingControllerImpl>();
-  content::BackgroundTracingManagerImpl::GetInstance()
-      ->AddMetadataGeneratorFunction();
-
   // Registers the browser process as a memory-instrumentation client, so
   // that data for the browser process will be available in memory dumps.
   service_manager::Connector* connector =
@@ -1611,13 +1605,6 @@ void BrowserMainLoop::InitializeMojo() {
       memory_instrumentation::mojom::ProcessType::BROWSER);
   memory_instrumentation::ClientProcessImpl::CreateInstance(config);
 
-  // Start startup tracing through TracingController's interface. TraceLog has
-  // been enabled in content_main_runner where threads are not available. Now We
-  // need to start tracing for all other tracing agents, which require threads.
-  // We can only do this after starting the main message loop to avoid calling
-  // MessagePumpForUI::ScheduleWork() before MessagePumpForUI::Start().
-  TracingControllerImpl::GetInstance()->StartStartupTracingIfNeeded();
-
   if (parts_) {
     parts_->ServiceManagerConnectionStarted(
         ServiceManagerConnection::GetForProcess());
--- a/content/browser/browser_main_loop.h
+++ b/content/browser/browser_main_loop.h
@@ -386,7 +386,6 @@ class CONTENT_EXPORT BrowserMainLoop {
   std::unique_ptr<discardable_memory::DiscardableSharedMemoryManager>
       discardable_shared_memory_manager_;
   scoped_refptr<SaveFileManager> save_file_manager_;
-  std::unique_ptr<content::TracingControllerImpl> tracing_controller_;
   scoped_refptr<responsiveness::Watcher> responsiveness_watcher_;
 #if !defined(OS_ANDROID)
   // A SharedBitmapManager used to sharing and mapping IDs to shared memory
--- a/content/browser/devtools/browser_devtools_agent_host.cc
+++ b/content/browser/devtools/browser_devtools_agent_host.cc
@@ -20,7 +20,6 @@
 #include "content/browser/devtools/protocol/system_info_handler.h"
 #include "content/browser/devtools/protocol/target_handler.h"
 #include "content/browser/devtools/protocol/tethering_handler.h"
-#include "content/browser/devtools/protocol/tracing_handler.h"
 #include "content/browser/frame_host/frame_tree_node.h"
 
 namespace content {
@@ -89,8 +88,6 @@ bool BrowserDevToolsAgentHost::AttachSes
     session->AddHandler(std::make_unique<protocol::TetheringHandler>(
         socket_callback_, tethering_task_runner_));
   }
-  session->AddHandler(std::make_unique<protocol::TracingHandler>(
-      nullptr, GetIOContext(), session->UsesBinaryProtocol()));
   return true;
 }
 
--- a/content/browser/devtools/render_frame_devtools_agent_host.cc
+++ b/content/browser/devtools/render_frame_devtools_agent_host.cc
@@ -38,7 +38,6 @@
 #include "content/browser/devtools/protocol/service_worker_handler.h"
 #include "content/browser/devtools/protocol/storage_handler.h"
 #include "content/browser/devtools/protocol/target_handler.h"
-#include "content/browser/devtools/protocol/tracing_handler.h"
 #include "content/browser/frame_host/navigation_handle_impl.h"
 #include "content/browser/frame_host/navigation_request.h"
 #include "content/browser/frame_host/render_frame_host_impl.h"
@@ -319,10 +318,6 @@ bool RenderFrameDevToolsAgentHost::Attac
   session->AddHandler(std::make_unique<protocol::PageHandler>(
       emulation_handler_ptr, session->client()->MayWriteLocalFiles()));
   session->AddHandler(std::make_unique<protocol::SecurityHandler>());
-  if (!frame_tree_node_ || !frame_tree_node_->parent()) {
-    session->AddHandler(std::make_unique<protocol::TracingHandler>(
-        frame_tree_node_, GetIOContext(), session->UsesBinaryProtocol()));
-  }
 
   if (sessions().empty()) {
     bool use_video_capture_api = true;
@@ -383,8 +378,6 @@ void RenderFrameDevToolsAgentHost::Ready
     NavigationHandle* navigation_handle) {
   NavigationHandleImpl* handle =
       static_cast<NavigationHandleImpl*>(navigation_handle);
-  for (auto* tracing : protocol::TracingHandler::ForAgentHost(this))
-    tracing->ReadyToCommitNavigation(handle);
 
   if (handle->frame_tree_node() != frame_tree_node_) {
     if (ShouldForceCreation() && handle->GetRenderFrameHost() &&
@@ -490,8 +483,6 @@ void RenderFrameDevToolsAgentHost::Rende
 
 void RenderFrameDevToolsAgentHost::FrameDeleted(RenderFrameHost* rfh) {
   RenderFrameHostImpl* host = static_cast<RenderFrameHostImpl*>(rfh);
-  for (auto* tracing : protocol::TracingHandler::ForAgentHost(this))
-    tracing->FrameDeleted(host);
   if (host->frame_tree_node() == frame_tree_node_) {
     DestroyOnRenderFrameGone();
     // |this| may be deleted at this point.
@@ -738,8 +729,6 @@ void RenderFrameDevToolsAgentHost::Synch
   if (!frame_trace_recorder_)
     return;
   bool did_initiate_recording = false;
-  for (auto* tracing : protocol::TracingHandler::ForAgentHost(this))
-    did_initiate_recording |= tracing->did_initiate_recording();
   if (did_initiate_recording) {
     frame_trace_recorder_->OnSynchronousSwapCompositorFrame(frame_host_,
                                                             frame_metadata);
--- a/content/browser/renderer_host/render_process_host_impl.cc
+++ b/content/browser/renderer_host/render_process_host_impl.cc
@@ -135,7 +135,6 @@
 #include "content/browser/site_instance_impl.h"
 #include "content/browser/storage_partition_impl.h"
 #include "content/browser/streams/stream_context.h"
-#include "content/browser/tracing/trace_message_filter.h"
 #include "content/browser/webrtc/webrtc_internals.h"
 #include "content/browser/websockets/websocket_manager.h"
 #include "content/browser/webui/web_ui_controller_factory_registry.h"
@@ -1921,7 +1920,6 @@ void RenderProcessHostImpl::CreateMessag
   p2p_socket_dispatcher_host_ =
       std::make_unique<P2PSocketDispatcherHost>(GetID());
 
-  AddFilter(new TraceMessageFilter(GetID()));
   AddFilter(new ResolveProxyMsgHelper(GetID()));
 
   scoped_refptr<ServiceWorkerContextWrapper> service_worker_context(
--- a/content/browser/webui/content_web_ui_controller_factory.cc
+++ b/content/browser/webui/content_web_ui_controller_factory.cc
@@ -13,7 +13,6 @@
 #include "content/browser/net/network_errors_listing_ui.h"
 #include "content/browser/process_internals/process_internals_ui.h"
 #include "content/browser/service_worker/service_worker_internals_ui.h"
-#include "content/browser/tracing/tracing_ui.h"
 #include "content/browser/webrtc/webrtc_internals_ui.h"
 #include "content/public/browser/storage_partition.h"
 #include "content/public/browser/web_contents.h"
@@ -76,7 +75,7 @@ ContentWebUIControllerFactory::CreateWeb
     return std::make_unique<ServiceWorkerInternalsUI>(web_ui);
   if (url.host_piece() == kChromeUINetworkErrorsListingHost)
     return std::make_unique<NetworkErrorsListingUI>(web_ui);
-#if !defined(OS_ANDROID)
+#if 0
   if (url.host_piece() == kChromeUITracingHost)
     return std::make_unique<TracingUI>(web_ui);
 #endif
--- a/chrome/browser/chrome_browser_main.cc
+++ b/chrome/browser/chrome_browser_main.cc
@@ -94,9 +94,6 @@
 #include "chrome/browser/shell_integration.h"
 #include "chrome/browser/site_isolation/site_isolation_policy.h"
 #include "chrome/browser/startup_data.h"
-#include "chrome/browser/tracing/background_tracing_field_trial.h"
-#include "chrome/browser/tracing/navigation_tracing.h"
-#include "chrome/browser/tracing/trace_event_system_stats_monitor.h"
 #include "chrome/browser/translate/translate_service.h"
 #include "chrome/browser/ui/browser.h"
 #include "chrome/browser/ui/browser_finder.h"
@@ -842,11 +839,6 @@ void ChromeBrowserMainParts::PostMainMes
 
   system_monitor_ = performance_monitor::SystemMonitor::Create();
 
-  // TODO(sebmarchand): Allow this to be created earlier if startup tracing is
-  // enabled.
-  trace_event_system_stats_monitor_ =
-      std::make_unique<tracing::TraceEventSystemStatsMonitor>();
-
   // device_event_log must be initialized after the message loop. Calls to
   // {DEVICE}_LOG prior to here will only be logged with VLOG. Some
   // platforms (e.g. chromeos) may have already initialized this.
@@ -1084,12 +1076,6 @@ int ChromeBrowserMainParts::PreCreateThr
 #endif  // defined(OS_WIN)
 #endif  // BUILDFLAG(ENABLE_VR)
 
-  // Enable Navigation Tracing only if a trace upload url is specified.
-  if (parsed_command_line_.HasSwitch(switches::kEnableNavigationTracing) &&
-      parsed_command_line_.HasSwitch(switches::kTraceUploadURL)) {
-    tracing::SetupNavigationTracing();
-  }
-
 #if defined(OS_WIN) || defined(OS_MACOSX) || \
     (defined(OS_LINUX) && !defined(OS_CHROMEOS))
   metrics::DesktopSessionDurationTracker::Initialize();
@@ -1155,10 +1141,6 @@ void ChromeBrowserMainParts::PostCreateT
 
 void ChromeBrowserMainParts::ServiceManagerConnectionStarted(
     content::ServiceManagerConnection* connection) {
-  // This should be called after the creation of the tracing controller. The
-  // tracing controller is created when the service manager connection is
-  // started.
-  tracing::SetupBackgroundTracingFieldTrial();
 
   for (size_t i = 0; i < chrome_extra_parts_.size(); ++i)
     chrome_extra_parts_[i]->ServiceManagerConnectionStarted(connection);
--- a/chrome/browser/chrome_content_browser_client.cc
+++ b/chrome/browser/chrome_content_browser_client.cc
@@ -144,7 +144,6 @@
 #include "chrome/browser/subresource_filter/chrome_subresource_filter_client.h"
 #include "chrome/browser/sync_file_system/local/sync_file_system_backend.h"
 #include "chrome/browser/tab_contents/tab_util.h"
-#include "chrome/browser/tracing/chrome_tracing_delegate.h"
 #include "chrome/browser/translate/translate_service.h"
 #include "chrome/browser/ui/blocked_content/blocked_window_params.h"
 #include "chrome/browser/ui/blocked_content/popup_blocker.h"
@@ -4454,7 +4453,7 @@ ChromeContentBrowserClient::GetDevToolsB
 }
 
 content::TracingDelegate* ChromeContentBrowserClient::GetTracingDelegate() {
-  return new ChromeTracingDelegate();
+  return nullptr;
 }
 
 bool ChromeContentBrowserClient::IsPluginAllowedToCallRequestOSFileHandle(
--- a/chrome/browser/prefs/browser_prefs.cc
+++ b/chrome/browser/prefs/browser_prefs.cc
@@ -63,7 +63,6 @@
 #include "chrome/browser/ssl/chrome_ssl_host_state_delegate.h"
 #include "chrome/browser/ssl/ssl_config_service_manager.h"
 #include "chrome/browser/task_manager/task_manager_interface.h"
-#include "chrome/browser/tracing/chrome_tracing_delegate.h"
 #include "chrome/browser/ui/blocked_content/safe_browsing_triggered_popup_blocker.h"
 #include "chrome/browser/ui/browser_ui_prefs.h"
 #include "chrome/browser/ui/navigation_correction_tab_observer.h"
@@ -493,7 +492,6 @@ void RegisterLocalState(PrefRegistrySimp
   BrowserProcessImpl::RegisterPrefs(registry);
   ChromeContentBrowserClient::RegisterLocalStatePrefs(registry);
   ChromeMetricsServiceClient::RegisterPrefs(registry);
-  ChromeTracingDelegate::RegisterPrefs(registry);
   component_updater::RegisterPrefs(registry);
   ExternalProtocolHandler::RegisterPrefs(registry);
   flags_ui::PrefServiceFlagsStorage::RegisterPrefs(registry);
--- a/chrome/browser/lifetime/browser_shutdown.cc
+++ b/chrome/browser/lifetime/browser_shutdown.cc
@@ -35,9 +35,7 @@
 #include "components/metrics/metrics_service.h"
 #include "components/prefs/pref_registry_simple.h"
 #include "components/prefs/pref_service.h"
-#include "components/tracing/common/tracing_switches.h"
 #include "content/public/browser/render_process_host.h"
-#include "content/public/browser/tracing_controller.h"
 #include "printing/buildflags/buildflags.h"
 #include "rlz/buildflags/buildflags.h"
 
--- a/chrome/browser/sessions/tab_loader.cc
+++ b/chrome/browser/sessions/tab_loader.cc
@@ -18,7 +18,6 @@
 #include "chrome/browser/ui/browser.h"
 #include "chrome/browser/ui/browser_finder.h"
 #include "components/favicon/content/content_favicon_driver.h"
-#include "content/public/browser/background_tracing_manager.h"
 #include "content/public/browser/navigation_controller.h"
 #include "content/public/browser/web_contents.h"
 #include "content/public/common/content_features.h"
@@ -29,15 +28,6 @@ using resource_coordinator::TabLoadTrack
 namespace {
 
 void BackgroundTracingTrigger() {
-  static content::BackgroundTracingManager::TriggerHandle trigger_handle_ = -1;
-  if (trigger_handle_ == -1) {
-    trigger_handle_ =
-        content::BackgroundTracingManager::GetInstance()->RegisterTriggerType(
-            "session-restore-config");
-  }
-  content::BackgroundTracingManager::GetInstance()->TriggerNamedEvent(
-      trigger_handle_,
-      content::BackgroundTracingManager::StartedFinalizingCallback());
 }
 
 const base::TickClock* GetDefaultTickClock() {
--- a/components/feedback/tracing_manager.cc
+++ b/components/feedback/tracing_manager.cc
@@ -10,7 +10,6 @@
 #include "base/single_thread_task_runner.h"
 #include "base/threading/thread_task_runner_handle.h"
 #include "components/feedback/feedback_util.h"
-#include "content/public/browser/tracing_controller.h"
 
 namespace {
 
@@ -43,10 +42,6 @@ int TracingManager::RequestTrace() {
 
   current_trace_id_ = g_next_trace_id;
   ++g_next_trace_id;
-  content::TracingController::GetInstance()->StopTracing(
-      content::TracingController::CreateStringEndpoint(
-          base::Bind(&TracingManager::OnTraceDataCollected,
-                     weak_ptr_factory_.GetWeakPtr())));
   return current_trace_id_;
 }
 
@@ -89,9 +84,6 @@ void TracingManager::DiscardTraceData(in
 }
 
 void TracingManager::StartTracing() {
-  content::TracingController::GetInstance()->StartTracing(
-      base::trace_event::TraceConfig(),
-      content::TracingController::StartTracingDoneCallback());
 }
 
 void TracingManager::OnTraceDataCollected(
--- a/chrome/browser/profiling_host/profiling_process_host.cc
+++ b/chrome/browser/profiling_host/profiling_process_host.cc
@@ -22,7 +22,6 @@
 #include "base/values.h"
 #include "build/build_config.h"
 #include "chrome/browser/browser_process.h"
-#include "chrome/browser/tracing/crash_service_uploader.h"
 #include "components/heap_profiling/supervisor.h"
 #include "components/services/heap_profiling/public/cpp/controller.h"
 #include "components/services/heap_profiling/public/cpp/settings.h"
@@ -48,21 +47,6 @@ const char kConfigCategoryKey[] = "categ
 const char kConfigCategoryMemlog[] = "MEMLOG";
 const char kOOPHeapProfilingUploadUrl[] = "upload_url";
 
-void OnTraceUploadComplete(TraceCrashServiceUploader* uploader,
-                           bool success,
-                           const std::string& feedback) {
-  UMA_HISTOGRAM_BOOLEAN("OutOfProcessHeapProfiling.UploadTrace.Success",
-                        success);
-
-  if (!success) {
-    LOG(ERROR) << "Cannot upload trace file: " << feedback;
-    return;
-  }
-
-  // The reports is successfully sent. Reports the crash-id to ease debugging.
-  LOG(WARNING) << "slow-reports sent: '" << feedback << '"';
-}
-
 void UploadTraceToCrashServer(std::string upload_url,
                               std::string file_contents,
                               std::string trigger_name,
@@ -91,16 +75,6 @@ void UploadTraceToCrashServer(std::strin
       std::make_unique<base::DictionaryValue>();
   metadata->SetKey("config", std::move(configs));
   metadata->SetKey(kConfigScenarioName, base::Value("MEMLOG"));
-
-  TraceCrashServiceUploader* uploader = new TraceCrashServiceUploader(
-      g_browser_process->shared_url_loader_factory());
-  if (!upload_url.empty())
-    uploader->SetUploadURL(upload_url);
-
-  uploader->DoUpload(file_contents, content::TraceUploader::COMPRESSED_UPLOAD,
-                     std::move(metadata),
-                     content::TraceUploader::UploadProgressCallback(),
-                     base::Bind(&OnTraceUploadComplete, base::Owned(uploader)));
 }
 
 }  // namespace
--- a/components/heap_profiling/test_driver.cc
+++ b/components/heap_profiling/test_driver.cc
@@ -26,7 +26,6 @@
 #include "content/public/browser/browser_task_traits.h"
 #include "content/public/browser/browser_thread.h"
 #include "content/public/browser/render_process_host.h"
-#include "content/public/browser/tracing_controller.h"
 #include "content/public/common/service_manager_connection.h"
 
 namespace heap_profiling {
--- a/components/heap_profiling/supervisor.cc
+++ b/components/heap_profiling/supervisor.cc
@@ -13,7 +13,6 @@
 #include "components/services/heap_profiling/public/cpp/settings.h"
 #include "content/public/browser/browser_task_traits.h"
 #include "content/public/browser/browser_thread.h"
-#include "content/public/browser/tracing_controller.h"
 #include "content/public/common/service_manager_connection.h"
 #include "services/resource_coordinator/public/cpp/memory_instrumentation/memory_instrumentation.h"
 #include "services/service_manager/public/cpp/connector.h"
@@ -113,6 +112,9 @@ void Supervisor::RequestTraceWithHeapDum
   DCHECK(content::BrowserThread::CurrentlyOn(content::BrowserThread::UI));
   DCHECK(HasStarted());
 
+  return;
+
+  /*
   if (content::TracingController::GetInstance()->IsTracing()) {
     DLOG(ERROR) << "Requesting heap dump when tracing has already started.";
     base::ThreadTaskRunnerHandle::Get()->PostTask(
@@ -163,6 +165,7 @@ void Supervisor::RequestTraceWithHeapDum
       GetBackgroundTracingConfig(anonymize),
       base::AdaptCallbackForRepeating(std::move(trigger_memory_dump_callback)));
   DCHECK(result);
+  */
 }
 
 void Supervisor::StartServiceOnIOThread(
--- a/chrome/browser/ui/tab_helpers.cc
+++ b/chrome/browser/ui/tab_helpers.cc
@@ -56,7 +56,6 @@
 #include "chrome/browser/sync/sessions/sync_sessions_router_tab_helper.h"
 #include "chrome/browser/sync/sessions/sync_sessions_web_contents_router_factory.h"
 #include "chrome/browser/tab_contents/navigation_metrics_recorder.h"
-#include "chrome/browser/tracing/navigation_tracing.h"
 #include "chrome/browser/translate/chrome_translate_client.h"
 #include "chrome/browser/ui/autofill/chrome_autofill_client.h"
 #include "chrome/browser/ui/blocked_content/popup_blocker_tab_helper.h"
@@ -89,7 +88,6 @@
 #include "components/offline_pages/buildflags/buildflags.h"
 #include "components/password_manager/core/browser/password_manager.h"
 #include "components/subresource_filter/core/browser/subresource_filter_features.h"
-#include "components/tracing/common/tracing_switches.h"
 #include "components/ukm/content/source_url_recorder.h"
 #include "content/public/browser/web_contents.h"
 #include "extensions/buildflags/buildflags.h"
@@ -350,9 +348,6 @@ void TabHelpers::AttachTabHelpers(WebCon
   if (predictors::LoadingPredictorFactory::GetForProfile(profile))
     predictors::LoadingPredictorTabHelper::CreateForWebContents(web_contents);
 
-  if (tracing::NavigationTracingObserver::IsEnabled())
-    tracing::NavigationTracingObserver::CreateForWebContents(web_contents);
-
   if (MediaEngagementService::IsEnabled())
     MediaEngagementService::CreateWebContentsObserver(web_contents);
 
--- a/content/browser/renderer_host/pepper/browser_ppapi_host_impl.cc
+++ b/content/browser/renderer_host/pepper/browser_ppapi_host_impl.cc
@@ -6,7 +6,6 @@
 
 #include "base/metrics/histogram_functions.h"
 #include "content/browser/renderer_host/pepper/pepper_message_filter.h"
-#include "content/browser/tracing/trace_message_filter.h"
 #include "content/common/pepper_renderer_instance_data.h"
 #include "content/public/common/process_type.h"
 #include "ipc/ipc_message_macros.h"
@@ -39,7 +38,6 @@ BrowserPpapiHost* BrowserPpapiHost::Crea
       new PepperMessageFilter());
   channel->AddFilter(pepper_message_filter->GetFilter());
   channel->AddFilter(browser_ppapi_host->message_filter().get());
-  channel->AddFilter((new TraceMessageFilter(render_process_id))->GetFilter());
 
   return browser_ppapi_host;
 }
--- a/content/public/app/content_packaged_services_manifest.cc
+++ b/content/public/app/content_packaged_services_manifest.cc
@@ -19,7 +19,6 @@
 #include "services/resource_coordinator/public/cpp/manifest.h"
 #include "services/service_manager/public/cpp/manifest_builder.h"
 #include "services/shape_detection/public/cpp/manifest.h"
-#include "services/tracing/manifest.h"
 #include "services/video_capture/public/cpp/manifest.h"
 #include "services/viz/public/cpp/manifest.h"
 
@@ -60,7 +59,6 @@ const service_manager::Manifest& GetCont
         .PackageService(network::GetManifest())
         .PackageService(resource_coordinator::GetManifest())
         .PackageService(shape_detection::GetManifest())
-        .PackageService(tracing::GetManifest())
         .PackageService(video_capture::GetManifest())
         .PackageService(viz::GetManifest())
 #if defined(OS_LINUX)
--- a/services/service_manager/public/cpp/service_binding.cc
+++ b/services/service_manager/public/cpp/service_binding.cc
@@ -10,8 +10,6 @@
 #include "base/no_destructor.h"
 #include "base/synchronization/lock.h"
 #include "services/service_manager/public/cpp/service.h"
-#include "services/tracing/public/cpp/traced_process.h"
-#include "services/tracing/public/mojom/traced_process.mojom.h"
 
 namespace service_manager {
 
@@ -172,10 +170,6 @@ void ServiceBinding::OnBindInterface(
     factory_bindings_.AddBinding(
         this, mojom::ServiceFactoryRequest(std::move(interface_pipe)));
     return;
-  } else if (interface_name == tracing::mojom::TracedProcess::Name_) {
-    tracing::TracedProcess::OnTracedProcessRequest(
-        tracing::mojom::TracedProcessRequest(std::move(interface_pipe)));
-    return;
   }
 
   service_->OnConnect(source_info, interface_name, std::move(interface_pipe));
--- a/services/BUILD.gn
+++ b/services/BUILD.gn
@@ -36,7 +36,6 @@ test("services_unittests") {
       "//services/proxy_resolver:tests",
       "//services/resource_coordinator:tests",
       "//services/shape_detection:tests",
-      "//services/tracing:tests",
       "//services/viz",
       "//services/viz/privileged/interfaces:unit_tests",
       "//services/viz/public/cpp/compositing:tests",
--- a/content/public/browser/BUILD.gn
+++ b/content/public/browser/BUILD.gn
@@ -381,7 +381,6 @@ jumbo_source_set("browser_sources") {
     "//services/network/public/mojom",
     "//services/resource_coordinator/public/cpp:resource_coordinator_cpp",
     "//services/service_manager/public/cpp",
-    "//services/tracing/public/cpp",
     "//services/ws/public/mojom",
     "//third_party/webrtc/modules/desktop_capture",
 
--- a/services/service_manager/public/cpp/BUILD.gn
+++ b/services/service_manager/public/cpp/BUILD.gn
@@ -44,10 +44,6 @@ component("cpp") {
     "//url",
   ]
 
-  deps = [
-    "//services/tracing/public/cpp:traced_process",
-  ]
-
   defines = [
     "IS_SERVICE_MANAGER_CPP_IMPL",
 
--- a/content/browser/tracing/tracing_controller_impl.cc
+++ b/content/browser/tracing/tracing_controller_impl.cc
@@ -194,19 +194,9 @@ void TracingControllerImpl::AddAgents()
 }
 
 void TracingControllerImpl::ConnectToServiceIfNeeded() {
-  if (!coordinator_) {
-    ServiceManagerConnection::GetForProcess()->GetConnector()->BindInterface(
-        tracing::mojom::kServiceName, &coordinator_);
-    coordinator_.set_connection_error_handler(base::BindOnce(
-        [](TracingControllerImpl* controller) {
-          controller->coordinator_.reset();
-        },
-        base::Unretained(this)));
-  }
 }
 
 void TracingControllerImpl::DisconnectFromService() {
-  coordinator_ = nullptr;
 }
 
 // Can be called on any thread.
@@ -378,14 +368,6 @@ bool TracingControllerImpl::StartTracing
       std::make_unique<base::trace_event::TraceConfig>(trace_config);
 
   ConnectToServiceIfNeeded();
-  coordinator_->StartTracing(
-      trace_config.ToString(),
-      base::BindOnce(
-          [](StartTracingDoneCallback callback, bool success) {
-            if (!callback.is_null())
-              std::move(callback).Run();
-          },
-          std::move(callback)));
   // TODO(chiniforooshan): The actual success value should be sent by the
   // callback asynchronously.
   return true;
@@ -506,16 +488,8 @@ bool TracingControllerImpl::StopTracing(
       new mojo::DataPipeDrainer(this, std::move(data_pipe.consumer_handle)));
   if (agent_label.empty()) {
     // Stop and flush all agents.
-    coordinator_->StopAndFlush(
-        std::move(data_pipe.producer_handle),
-        base::BindRepeating(&TracingControllerImpl::OnMetadataAvailable,
-                            base::Unretained(this)));
   } else {
     // Stop all and flush a particular agent.
-    coordinator_->StopAndFlushAgent(
-        std::move(data_pipe.producer_handle), agent_label,
-        base::BindRepeating(&TracingControllerImpl::OnMetadataAvailable,
-                            base::Unretained(this)));
   }
   // TODO(chiniforooshan): Is the return value used anywhere?
   return true;
@@ -526,12 +500,6 @@ bool TracingControllerImpl::GetTraceBuff
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
 
   ConnectToServiceIfNeeded();
-  coordinator_->RequestBufferUsage(base::BindOnce(
-      [](GetTraceBufferUsageCallback callback, bool success, float percent_full,
-         uint32_t approximate_count) {
-        std::move(callback).Run(percent_full, approximate_count);
-      },
-      std::move(callback)));
   // TODO(chiniforooshan): The actual success value should be sent by the
   // callback asynchronously.
   return true;
--- a/content/child/BUILD.gn
+++ b/content/child/BUILD.gn
@@ -107,7 +107,6 @@ target(link_target_type, "child") {
     "//services/resource_coordinator/public/cpp/memory_instrumentation",
     "//services/service_manager/public/cpp",
     "//services/service_manager/public/mojom",
-    "//services/tracing/public/cpp",
     "//skia",
     "//storage/common",
     "//third_party/blink/public:blink_headers",
--- a/content/public/app/BUILD.gn
+++ b/content/public/app/BUILD.gn
@@ -234,7 +234,6 @@ source_set("content_packaged_services_ma
     "//services/network/public/cpp:manifest",
     "//services/resource_coordinator/public/cpp:manifest",
     "//services/shape_detection/public/cpp:manifest",
-    "//services/tracing:manifest",
     "//services/video_capture/public/cpp:manifest",
     "//services/viz/public/cpp:manifest",
   ]
--- a/mojo/public/tools/bindings/chromium_bindings_configuration.gni
+++ b/mojo/public/tools/bindings/chromium_bindings_configuration.gni
@@ -38,7 +38,6 @@ _typemap_imports = [
   "//services/proxy_resolver/public/cpp/typemaps.gni",
   "//services/resource_coordinator/public/cpp/typemaps.gni",
   "//services/service_manager/public/cpp/typemaps.gni",
-  "//services/tracing/public/mojom/typemaps.gni",
   "//services/ws/public/mojom/ime/typemaps.gni",
   "//services/viz/privileged/cpp/typemaps.gni",
   "//services/viz/privileged/interfaces/compositing/typemaps.gni",
--- a/content/app/BUILD.gn
+++ b/content/app/BUILD.gn
@@ -30,7 +30,6 @@ template("implement_content_app") {
     "//crypto",
     "//services/service_manager/embedder",
     "//services/service_manager/public/mojom",
-    "//services/tracing/public/cpp",
     "//mojo/core/embedder",
     "//ppapi/buildflags",
     "//ui/base",
--- a/content/utility/BUILD.gn
+++ b/content/utility/BUILD.gn
@@ -48,8 +48,6 @@ jumbo_source_set("utility") {
     "//services/service_manager/public/mojom",
     "//services/shape_detection:lib",
     "//services/shape_detection/public/mojom",
-    "//services/tracing:lib",
-    "//services/tracing/public/mojom",
     "//services/video_capture:lib",
     "//services/video_capture/public/mojom:constants",
     "//services/viz:lib",
--- a/chrome/browser/chrome_browser_main.h
+++ b/chrome/browser/chrome_browser_main.h
@@ -29,10 +29,6 @@ class ShutdownWatcherHelper;
 class ThreadProfiler;
 class WebUsbDetector;
 
-namespace tracing {
-class TraceEventSystemStatsMonitor;
-}
-
 namespace performance_monitor {
 class SystemMonitor;
 }
@@ -164,11 +160,6 @@ class ChromeBrowserMainParts : public co
   // metrics they need.
   std::unique_ptr<performance_monitor::SystemMonitor> system_monitor_;
 
-  // The system stats monitor used by chrome://tracing. This doesn't do anything
-  // until tracing of the |system_stats| category is enabled.
-  std::unique_ptr<tracing::TraceEventSystemStatsMonitor>
-      trace_event_system_stats_monitor_;
-
   // Whether PerformPreMainMessageLoopStartup() is called on VariationsService.
   // Initialized to true if |MainFunctionParams::ui_task| is null (meaning not
   // running browser_tests), but may be forced to true for tests.
--- a/content/app/content_main_runner_impl.cc
+++ b/content/app/content_main_runner_impl.cc
@@ -69,7 +69,6 @@
 #include "services/service_manager/sandbox/sandbox_type.h"
 #include "services/service_manager/sandbox/switches.h"
 #include "services/service_manager/zygote/common/zygote_buildflags.h"
-#include "services/tracing/public/cpp/trace_startup.h"
 #include "third_party/blink/public/common/origin_trials/trial_token_validator.h"
 #include "ui/base/ui_base_paths.h"
 #include "ui/base/ui_base_switches.h"
@@ -493,7 +492,7 @@ int RunZygote(ContentMainDelegate* deleg
       command_line.GetSwitchValueASCII(switches::kProcessType);
   ContentClientInitializer::Set(process_type, delegate);
 
-#if !defined(OS_ANDROID)
+#if 0
   tracing::EnableStartupTracingIfNeeded();
 #endif  // !OS_ANDROID
 
@@ -695,7 +694,7 @@ int ContentMainRunnerImpl::Initialize(co
     SetContentClient(&empty_content_client_);
   ContentClientInitializer::Set(process_type, delegate_);
 
-#if !defined(OS_ANDROID)
+#if 0
     // Enable startup tracing asap to avoid early TRACE_EVENT calls being
     // ignored. For Android, startup tracing is enabled in an even earlier place
     // content/app/android/library_loader_hooks.cc.
--- a/content/utility/utility_service_factory.cc
+++ b/content/utility/utility_service_factory.cc
@@ -29,9 +29,6 @@
 #include "services/network/network_service.h"
 #include "services/network/public/cpp/features.h"
 #include "services/service_manager/public/mojom/service.mojom.h"
-#include "services/tracing/public/cpp/tracing_features.h"
-#include "services/tracing/public/mojom/constants.mojom.h"
-#include "services/tracing/tracing_service.h"
 #include "services/video_capture/public/mojom/constants.mojom.h"
 #include "services/video_capture/service_impl.h"
 #include "services/viz/public/interfaces/constants.mojom.h"
@@ -154,10 +151,6 @@ void UtilityServiceFactory::RunService(
     content::UtilityThread::Get()->EnsureBlinkInitialized();
     service =
         std::make_unique<data_decoder::DataDecoderService>(std::move(request));
-  } else if (service_name == tracing::mojom::kServiceName &&
-             !base::FeatureList::IsEnabled(
-                 features::kTracingServiceInProcess)) {
-    service = std::make_unique<tracing::TracingService>(std::move(request));
   } else if (service_name == mojom::kNetworkServiceName &&
              base::FeatureList::IsEnabled(network::features::kNetworkService)) {
     // Unlike other services supported by the utility process, the network
--- a/chrome/browser/metrics/chrome_metrics_service_client.cc
+++ b/chrome/browser/metrics/chrome_metrics_service_client.cc
@@ -51,7 +51,6 @@
 #include "chrome/browser/safe_browsing/certificate_reporting_metrics_provider.h"
 #include "chrome/browser/sync/device_info_sync_service_factory.h"
 #include "chrome/browser/sync/profile_sync_service_factory.h"
-#include "chrome/browser/tracing/background_tracing_metrics_provider.h"
 #include "chrome/browser/translate/translate_ranker_metrics_provider.h"
 #include "chrome/common/buildflags.h"
 #include "chrome/common/channel_info.h"
@@ -624,9 +623,6 @@ void ChromeMetricsServiceClient::Registe
       std::make_unique<metrics::ComponentMetricsProvider>(
           g_browser_process->component_updater()));
 
-  metrics_service_->RegisterMetricsProvider(
-      std::make_unique<tracing::BackgroundTracingMetricsProvider>());
-
 #if defined(OS_ANDROID)
   metrics_service_->RegisterMetricsProvider(
       std::make_unique<AndroidMetricsProvider>());
--- a/content/browser/browser_main_runner_impl.cc
+++ b/content/browser/browser_main_runner_impl.cc
@@ -20,11 +20,8 @@
 #include "base/trace_event/heap_profiler_allocation_context_tracker.h"
 #include "base/trace_event/trace_event.h"
 #include "build/build_config.h"
-#include "components/tracing/common/trace_startup_config.h"
-#include "components/tracing/common/tracing_switches.h"
 #include "content/browser/browser_main_loop.h"
 #include "content/browser/notification_service_impl.h"
-#include "content/browser/tracing/tracing_controller_impl.h"
 #include "content/common/content_switches_internal.h"
 #include "content/public/common/content_switches.h"
 #include "content/public/common/main_function_params.h"
@@ -180,10 +177,6 @@ void BrowserMainRunnerImpl::Shutdown() {
 
   main_loop_->PreShutdown();
 
-  // Finalize the startup tracing session if it is still active.
-  if (TracingControllerImpl::GetInstance())
-    TracingControllerImpl::GetInstance()->FinalizeStartupTracingIfNeeded();
-
   {
     // The trace event has to stay between profiler creation and destruction.
     TRACE_EVENT0("shutdown", "BrowserMainRunner");
